/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class ShedlockDao(configuration: Configuration?) : DAOImpl<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.ShedlockRecord, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock, String>(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock::class.java, configuration) {

    /**
     * Create a new ShedlockDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock): String = o.name

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetchRange(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetch(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.NAME, *values)

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    fun fetchOneByName(value: String): com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock? = fetchOne(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.NAME, value)

    /**
     * Fetch records that have <code>lock_until BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLockUntil(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetchRange(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCK_UNTIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lock_until IN (values)</code>
     */
    fun fetchByLockUntil(vararg values: LocalDateTime): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetch(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCK_UNTIL, *values)

    /**
     * Fetch records that have <code>locked_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLockedAt(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetchRange(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>locked_at IN (values)</code>
     */
    fun fetchByLockedAt(vararg values: LocalDateTime): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetch(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_AT, *values)

    /**
     * Fetch records that have <code>locked_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLockedBy(lowerInclusive: String, upperInclusive: String): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetchRange(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_BY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>locked_by IN (values)</code>
     */
    fun fetchByLockedBy(vararg values: String): List<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock> = fetch(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_BY, *values)
}
