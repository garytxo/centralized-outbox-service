/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables


import java.time.LocalDateTime
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OutboxEventType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>?,
    aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>(
    alias,
    com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.CentralOutbox.CENTRAL_OUTBOX,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>central_outbox.outbox_event_type</code>
         */
        val OUTBOX_EVENT_TYPE: OutboxEventType = OutboxEventType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord::class.java

    /**
     * The column <code>central_outbox.outbox_event_type.id</code>.
     */
    val ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.event_type</code>.
     */
    val EVENT_TYPE: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("event_type"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.active</code>.
     */
    val ACTIVE: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, Boolean?> = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.description</code>.
     */
    val DESCRIPTION: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.queue_name</code>.
     */
    val QUEUE_NAME: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("queue_name"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.scheduled_cron</code>.
     */
    val SCHEDULED_CRON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("scheduled_cron"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column
     * <code>central_outbox.outbox_event_type.scheduled_lock_at_most_for</code>.
     */
    val SCHEDULED_LOCK_AT_MOST_FOR: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("scheduled_lock_at_most_for"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("'PT5M'::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>central_outbox.outbox_event_type.scheduled_lock_at_least_for</code>.
     */
    val SCHEDULED_LOCK_AT_LEAST_FOR: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("scheduled_lock_at_least_for"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("'PT1M'::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.row_version</code>.
     */
    val ROW_VERSION: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, Int?> = createField(DSL.name("row_version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.row_created_by</code>.
     */
    val ROW_CREATED_BY: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("row_created_by"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.row_created_on</code>.
     */
    val ROW_CREATED_ON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, LocalDateTime?> = createField(DSL.name("row_created_on"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.row_updated_by</code>.
     */
    val ROW_UPDATED_BY: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, String?> = createField(DSL.name("row_updated_by"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>central_outbox.outbox_event_type.row_updated_on</code>.
     */
    val ROW_UPDATED_ON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, LocalDateTime?> = createField(DSL.name("row_updated_on"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>central_outbox.outbox_event_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>central_outbox.outbox_event_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>central_outbox.outbox_event_type</code> table reference
     */
    constructor(): this(DSL.name("outbox_event_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord>): this(Internal.createPathAlias(child, key), child, key, OUTBOX_EVENT_TYPE, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.CentralOutbox.CENTRAL_OUTBOX
    override fun getIndexes(): List<Index> = listOf(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.indexes.IDX_EVENT_TYPE_CONSTRAINT)
    override fun getPrimaryKey(): UniqueKey<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.keys.PK_OUTBOX_EVENT_TYPE
    override fun getRecordVersion(): TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventTypeRecord, Int?> = ROW_VERSION
    override fun `as`(alias: String): OutboxEventType = OutboxEventType(DSL.name(alias), this)
    override fun `as`(alias: Name): OutboxEventType = OutboxEventType(alias, this)
    override fun `as`(alias: Table<*>): OutboxEventType = OutboxEventType(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OutboxEventType = OutboxEventType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OutboxEventType = OutboxEventType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OutboxEventType = OutboxEventType(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row13<UUID?, String?, Boolean?, String?, String?, String?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.fieldsRow() as Row13<UUID?, String?, Boolean?, String?, String?, String?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, Boolean?, String?, String?, String?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, Boolean?, String?, String?, String?, String?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
