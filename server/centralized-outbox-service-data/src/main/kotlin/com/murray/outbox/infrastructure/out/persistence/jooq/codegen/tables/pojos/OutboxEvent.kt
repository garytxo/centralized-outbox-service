/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos


import java.time.LocalDateTime
import java.util.UUID


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class OutboxEvent(
    override var id: UUID,
    override var eventTypeId: UUID,
    override var eventStatus: String,
    override var sourceUserId: String? = null,
    override var sourceEventId: String,
    override var sourcePayload: String,
    override var processGroupId: UUID? = null,
    override var processedOn: LocalDateTime? = null,
    override var processedError: String? = null,
    override var rowVersion: Int? = null,
    override var rowCreatedBy: String,
    override var rowCreatedOn: LocalDateTime? = null,
    override var rowUpdatedBy: String? = null,
    override var rowUpdatedOn: LocalDateTime? = null
): com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEvent {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: OutboxEvent = other as OutboxEvent
        if (this.id != o.id)
            return false
        if (this.eventTypeId != o.eventTypeId)
            return false
        if (this.eventStatus != o.eventStatus)
            return false
        if (this.sourceUserId == null) {
            if (o.sourceUserId != null)
                return false
        }
        else if (this.sourceUserId != o.sourceUserId)
            return false
        if (this.sourceEventId != o.sourceEventId)
            return false
        if (this.sourcePayload != o.sourcePayload)
            return false
        if (this.processGroupId == null) {
            if (o.processGroupId != null)
                return false
        }
        else if (this.processGroupId != o.processGroupId)
            return false
        if (this.processedOn == null) {
            if (o.processedOn != null)
                return false
        }
        else if (this.processedOn != o.processedOn)
            return false
        if (this.processedError == null) {
            if (o.processedError != null)
                return false
        }
        else if (this.processedError != o.processedError)
            return false
        if (this.rowVersion == null) {
            if (o.rowVersion != null)
                return false
        }
        else if (this.rowVersion != o.rowVersion)
            return false
        if (this.rowCreatedBy != o.rowCreatedBy)
            return false
        if (this.rowCreatedOn == null) {
            if (o.rowCreatedOn != null)
                return false
        }
        else if (this.rowCreatedOn != o.rowCreatedOn)
            return false
        if (this.rowUpdatedBy == null) {
            if (o.rowUpdatedBy != null)
                return false
        }
        else if (this.rowUpdatedBy != o.rowUpdatedBy)
            return false
        if (this.rowUpdatedOn == null) {
            if (o.rowUpdatedOn != null)
                return false
        }
        else if (this.rowUpdatedOn != o.rowUpdatedOn)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.id.hashCode()
        result = prime * result + this.eventTypeId.hashCode()
        result = prime * result + this.eventStatus.hashCode()
        result = prime * result + (if (this.sourceUserId == null) 0 else this.sourceUserId.hashCode())
        result = prime * result + this.sourceEventId.hashCode()
        result = prime * result + this.sourcePayload.hashCode()
        result = prime * result + (if (this.processGroupId == null) 0 else this.processGroupId.hashCode())
        result = prime * result + (if (this.processedOn == null) 0 else this.processedOn.hashCode())
        result = prime * result + (if (this.processedError == null) 0 else this.processedError.hashCode())
        result = prime * result + (if (this.rowVersion == null) 0 else this.rowVersion.hashCode())
        result = prime * result + this.rowCreatedBy.hashCode()
        result = prime * result + (if (this.rowCreatedOn == null) 0 else this.rowCreatedOn.hashCode())
        result = prime * result + (if (this.rowUpdatedBy == null) 0 else this.rowUpdatedBy.hashCode())
        result = prime * result + (if (this.rowUpdatedOn == null) 0 else this.rowUpdatedOn.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("OutboxEvent (")

        sb.append(id)
        sb.append(", ").append(eventTypeId)
        sb.append(", ").append(eventStatus)
        sb.append(", ").append(sourceUserId)
        sb.append(", ").append(sourceEventId)
        sb.append(", ").append(sourcePayload)
        sb.append(", ").append(processGroupId)
        sb.append(", ").append(processedOn)
        sb.append(", ").append(processedError)
        sb.append(", ").append(rowVersion)
        sb.append(", ").append(rowCreatedBy)
        sb.append(", ").append(rowCreatedOn)
        sb.append(", ").append(rowUpdatedBy)
        sb.append(", ").append(rowUpdatedOn)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEvent) {
        id = from.id
        eventTypeId = from.eventTypeId
        eventStatus = from.eventStatus
        sourceUserId = from.sourceUserId
        sourceEventId = from.sourceEventId
        sourcePayload = from.sourcePayload
        processGroupId = from.processGroupId
        processedOn = from.processedOn
        processedError = from.processedError
        rowVersion = from.rowVersion
        rowCreatedBy = from.rowCreatedBy
        rowCreatedOn = from.rowCreatedOn
        rowUpdatedBy = from.rowUpdatedBy
        rowUpdatedOn = from.rowUpdatedOn
    }

    override fun <E : com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEvent> into(into: E): E {
        into.from(this)
        return into
    }
}
