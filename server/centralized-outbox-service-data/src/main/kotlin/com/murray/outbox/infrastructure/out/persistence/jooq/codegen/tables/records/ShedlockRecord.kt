/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShedlockRecord private constructor() : UpdatableRecordImpl<ShedlockRecord>(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK), Record4<String?, LocalDateTime?, LocalDateTime?, String?>, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IShedlock {

    open override var name: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open override var lockUntil: LocalDateTime
        set(value): Unit = set(1, value)
        get(): LocalDateTime = get(1) as LocalDateTime

    open override var lockedAt: LocalDateTime
        set(value): Unit = set(2, value)
        get(): LocalDateTime = get(2) as LocalDateTime

    open override var lockedBy: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row4<String?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row4<String?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row4<String?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<String?> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.NAME
    override fun field2(): Field<LocalDateTime?> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCK_UNTIL
    override fun field3(): Field<LocalDateTime?> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_AT
    override fun field4(): Field<String?> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.Shedlock.SHEDLOCK.LOCKED_BY
    override fun component1(): String = name
    override fun component2(): LocalDateTime = lockUntil
    override fun component3(): LocalDateTime = lockedAt
    override fun component4(): String = lockedBy
    override fun value1(): String = name
    override fun value2(): LocalDateTime = lockUntil
    override fun value3(): LocalDateTime = lockedAt
    override fun value4(): String = lockedBy

    override fun value1(value: String?): ShedlockRecord {
        set(0, value)
        return this
    }

    override fun value2(value: LocalDateTime?): ShedlockRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDateTime?): ShedlockRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): ShedlockRecord {
        set(3, value)
        return this
    }

    override fun values(value1: String?, value2: LocalDateTime?, value3: LocalDateTime?, value4: String?): ShedlockRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IShedlock) {
        name = from.name
        lockUntil = from.lockUntil
        lockedAt = from.lockedAt
        lockedBy = from.lockedBy
        resetChangedOnNotNull()
    }

    override fun <E : com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IShedlock> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised ShedlockRecord
     */
    constructor(name: String, lockUntil: LocalDateTime, lockedAt: LocalDateTime, lockedBy: String): this() {
        this.name = name
        this.lockUntil = lockUntil
        this.lockedAt = lockedAt
        this.lockedBy = lockedBy
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ShedlockRecord
     */
    constructor(value: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos.Shedlock?): this() {
        if (value != null) {
            this.name = value.name
            this.lockUntil = value.lockUntil
            this.lockedAt = value.lockedAt
            this.lockedBy = value.lockedBy
            resetChangedOnNotNull()
        }
    }
}
