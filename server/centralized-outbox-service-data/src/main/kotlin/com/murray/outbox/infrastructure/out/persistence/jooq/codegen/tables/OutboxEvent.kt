/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables


import java.time.LocalDateTime
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OutboxEvent(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>?,
    aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>(
    alias,
    com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.CentralOutbox.CENTRAL_OUTBOX,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>central_outbox.outbox_event</code>
         */
        val OUTBOX_EVENT: OutboxEvent = OutboxEvent()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord::class.java

    /**
     * The column <code>central_outbox.outbox_event.id</code>.
     */
    val ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.event_type_id</code>.
     */
    val EVENT_TYPE_ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, UUID?> = createField(DSL.name("event_type_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.event_status</code>.
     */
    val EVENT_STATUS: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("event_status"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.source_user_id</code>.
     */
    val SOURCE_USER_ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("source_user_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>central_outbox.outbox_event.source_event_id</code>.
     */
    val SOURCE_EVENT_ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("source_event_id"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.source_payload</code>.
     */
    val SOURCE_PAYLOAD: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("source_payload"), SQLDataType.VARCHAR(2000).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.process_group_id</code>.
     */
    val PROCESS_GROUP_ID: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, UUID?> = createField(DSL.name("process_group_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>central_outbox.outbox_event.processed_on</code>.
     */
    val PROCESSED_ON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, LocalDateTime?> = createField(DSL.name("processed_on"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>central_outbox.outbox_event.processed_error</code>.
     */
    val PROCESSED_ERROR: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("processed_error"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>central_outbox.outbox_event.row_version</code>.
     */
    val ROW_VERSION: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, Int?> = createField(DSL.name("row_version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>central_outbox.outbox_event.row_created_by</code>.
     */
    val ROW_CREATED_BY: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("row_created_by"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>central_outbox.outbox_event.row_created_on</code>.
     */
    val ROW_CREATED_ON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, LocalDateTime?> = createField(DSL.name("row_created_on"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>central_outbox.outbox_event.row_updated_by</code>.
     */
    val ROW_UPDATED_BY: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, String?> = createField(DSL.name("row_updated_by"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>central_outbox.outbox_event.row_updated_on</code>.
     */
    val ROW_UPDATED_ON: TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, LocalDateTime?> = createField(DSL.name("row_updated_on"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>central_outbox.outbox_event</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>central_outbox.outbox_event</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>central_outbox.outbox_event</code> table reference
     */
    constructor(): this(DSL.name("outbox_event"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord>): this(Internal.createPathAlias(child, key), child, key, OUTBOX_EVENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.CentralOutbox.CENTRAL_OUTBOX
    override fun getPrimaryKey(): UniqueKey<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord> = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.keys.PK_OUTBOX_EVENT
    override fun getReferences(): List<ForeignKey<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, *>> = listOf(com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.keys.OUTBOX_EVENT__FK_OUTBOX_EVENT_TYPE_OUTBOX_EVENT_TYPE)

    private lateinit var _outboxEventType: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.OutboxEventType

    /**
     * Get the implicit join path to the
     * <code>central_outbox.outbox_event_type</code> table.
     */
    fun outboxEventType(): com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.OutboxEventType {
        if (!this::_outboxEventType.isInitialized)
            _outboxEventType = com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.OutboxEventType(this, com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.keys.OUTBOX_EVENT__FK_OUTBOX_EVENT_TYPE_OUTBOX_EVENT_TYPE)

        return _outboxEventType;
    }

    val outboxEventType: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.OutboxEventType
        get(): com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.OutboxEventType = outboxEventType()
    override fun getRecordVersion(): TableField<com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.records.OutboxEventRecord, Int?> = ROW_VERSION
    override fun `as`(alias: String): OutboxEvent = OutboxEvent(DSL.name(alias), this)
    override fun `as`(alias: Name): OutboxEvent = OutboxEvent(alias, this)
    override fun `as`(alias: Table<*>): OutboxEvent = OutboxEvent(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OutboxEvent = OutboxEvent(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OutboxEvent = OutboxEvent(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OutboxEvent = OutboxEvent(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<UUID?, UUID?, String?, String?, String?, String?, UUID?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?> = super.fieldsRow() as Row14<UUID?, UUID?, String?, String?, String?, String?, UUID?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, String?, String?, String?, String?, UUID?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, String?, String?, String?, String?, UUID?, LocalDateTime?, String?, Int?, String?, LocalDateTime?, String?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
