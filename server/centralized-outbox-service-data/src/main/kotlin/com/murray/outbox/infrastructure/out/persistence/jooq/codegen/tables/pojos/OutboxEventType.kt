/*
 * This file is generated by jOOQ.
 */
package com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.pojos


import java.time.LocalDateTime
import java.util.UUID


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class OutboxEventType(
    override var id: UUID,
    override var eventType: String,
    override var active: Boolean? = null,
    override var description: String,
    override var queueName: String,
    override var scheduledCron: String,
    override var scheduledLockAtMostFor: String? = null,
    override var scheduledLockAtLeastFor: String? = null,
    override var rowVersion: Int? = null,
    override var rowCreatedBy: String,
    override var rowCreatedOn: LocalDateTime? = null,
    override var rowUpdatedBy: String? = null,
    override var rowUpdatedOn: LocalDateTime? = null
): com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEventType {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: OutboxEventType = other as OutboxEventType
        if (this.id != o.id)
            return false
        if (this.eventType != o.eventType)
            return false
        if (this.active == null) {
            if (o.active != null)
                return false
        }
        else if (this.active != o.active)
            return false
        if (this.description != o.description)
            return false
        if (this.queueName != o.queueName)
            return false
        if (this.scheduledCron != o.scheduledCron)
            return false
        if (this.scheduledLockAtMostFor == null) {
            if (o.scheduledLockAtMostFor != null)
                return false
        }
        else if (this.scheduledLockAtMostFor != o.scheduledLockAtMostFor)
            return false
        if (this.scheduledLockAtLeastFor == null) {
            if (o.scheduledLockAtLeastFor != null)
                return false
        }
        else if (this.scheduledLockAtLeastFor != o.scheduledLockAtLeastFor)
            return false
        if (this.rowVersion == null) {
            if (o.rowVersion != null)
                return false
        }
        else if (this.rowVersion != o.rowVersion)
            return false
        if (this.rowCreatedBy != o.rowCreatedBy)
            return false
        if (this.rowCreatedOn == null) {
            if (o.rowCreatedOn != null)
                return false
        }
        else if (this.rowCreatedOn != o.rowCreatedOn)
            return false
        if (this.rowUpdatedBy == null) {
            if (o.rowUpdatedBy != null)
                return false
        }
        else if (this.rowUpdatedBy != o.rowUpdatedBy)
            return false
        if (this.rowUpdatedOn == null) {
            if (o.rowUpdatedOn != null)
                return false
        }
        else if (this.rowUpdatedOn != o.rowUpdatedOn)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.id.hashCode()
        result = prime * result + this.eventType.hashCode()
        result = prime * result + (if (this.active == null) 0 else this.active.hashCode())
        result = prime * result + this.description.hashCode()
        result = prime * result + this.queueName.hashCode()
        result = prime * result + this.scheduledCron.hashCode()
        result = prime * result + (if (this.scheduledLockAtMostFor == null) 0 else this.scheduledLockAtMostFor.hashCode())
        result = prime * result + (if (this.scheduledLockAtLeastFor == null) 0 else this.scheduledLockAtLeastFor.hashCode())
        result = prime * result + (if (this.rowVersion == null) 0 else this.rowVersion.hashCode())
        result = prime * result + this.rowCreatedBy.hashCode()
        result = prime * result + (if (this.rowCreatedOn == null) 0 else this.rowCreatedOn.hashCode())
        result = prime * result + (if (this.rowUpdatedBy == null) 0 else this.rowUpdatedBy.hashCode())
        result = prime * result + (if (this.rowUpdatedOn == null) 0 else this.rowUpdatedOn.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("OutboxEventType (")

        sb.append(id)
        sb.append(", ").append(eventType)
        sb.append(", ").append(active)
        sb.append(", ").append(description)
        sb.append(", ").append(queueName)
        sb.append(", ").append(scheduledCron)
        sb.append(", ").append(scheduledLockAtMostFor)
        sb.append(", ").append(scheduledLockAtLeastFor)
        sb.append(", ").append(rowVersion)
        sb.append(", ").append(rowCreatedBy)
        sb.append(", ").append(rowCreatedOn)
        sb.append(", ").append(rowUpdatedBy)
        sb.append(", ").append(rowUpdatedOn)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEventType) {
        id = from.id
        eventType = from.eventType
        active = from.active
        description = from.description
        queueName = from.queueName
        scheduledCron = from.scheduledCron
        scheduledLockAtMostFor = from.scheduledLockAtMostFor
        scheduledLockAtLeastFor = from.scheduledLockAtLeastFor
        rowVersion = from.rowVersion
        rowCreatedBy = from.rowCreatedBy
        rowCreatedOn = from.rowCreatedOn
        rowUpdatedBy = from.rowUpdatedBy
        rowUpdatedOn = from.rowUpdatedOn
    }

    override fun <E : com.murray.outbox.infrastructure.`out`.persistence.jooq.codegen.tables.interfaces.IOutboxEventType> into(into: E): E {
        into.from(this)
        return into
    }
}
